# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane


# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.47.0"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
     crashlytics(
    api_token: '76dd277495f75c7f257f757f374ef126824c4ccd',
    build_secret: 'd13eccc432c741046683d72bc1281406997eee606328fdaea8aa71ad5740588b'
  )

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
    upload_to_play_store(track: 'beta')

  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
   lane :rollout do |options|
      
    #  gradle(task: "clean assembleRelease")
     version_code = options[:version_number]
     versionCode =
     if version_code == nil
       prompt(
         text:"Enter Version Code :"
       )
     else
       version_code
     end
      
      changelog = prompt(
                text: "Changelog: ",
           
      )
      languageCodes = ["tr-TR"]

      languageCodes.each{|code |
           changeLogFile = File.new("./metadata/android/"+code+"/changelogs/"+versionCode +".txt","w")
           changeLogFile.puts(changelog)
           changeLogFile.close
      }

    #     build_number = number_of_commits(all: true)
    # changelog_from_git_commits
    #  sh("flutter", "packages", "get")
    #   sh("flutter", "clean")
    #   sh("flutter", "build", "apk", "--build-number=#{version_code}")
    Dir.chdir "../../" do
      sh("flutter", "packages", "get")
      sh("flutter", "clean")
      sh("flutter", "build", "apk", "--build-number=#{version_code}","--build-name=1.0.1")
      
    end
      upload_to_play_store(
        package_name: 'com.vb10.android.learnigo',
        track: 'beta',
        json_key: 'fastlane/key.json',
   apk: "../build/app/outputs/apk/release/app-release.apk",
               skip_upload_metadata: true,
        skip_upload_images: true,
        skip_upload_screenshots: true
    )
      

  end

  def self.getPropertyFromGradle(property_name)
      version_code = "0"
      begin
           file = File.new("../app/build.gradle","r")
           while (line = file.gets)
               if line.include? property_name
                  versionComponents = line.strip.split(' ')
                  version_code = versionComponents[versionComponents.length - 1].tr("\"","")
                  break
               end
           end
           file.close
       rescue => err
           puts "An exception occured while reading gradle file: #{err}"
       end
       return version_code
end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
